<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on Random thoughts</title><link>https://randthoughts.github.io/tags/</link><description>Recent content in Tags on Random thoughts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://randthoughts.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>I tried Paragon's ntfs3 and it didn't go well</title><link>https://randthoughts.github.io/i-tried-paragons-ntfs3-and-it-didnt-go-well/</link><pubDate>Thu, 05 Jan 2023 17:46:12 +0100</pubDate><guid>https://randthoughts.github.io/i-tried-paragons-ntfs3-and-it-didnt-go-well/</guid><description>&lt;p>Like many users finding themselves dual booting Windows and Linux, I have an entry in my &lt;code>/etc/fstab&lt;/code> to automatically mount the Windows partition. And because I need read/write support, my only option has always been, of course, &lt;code>ntfs-3g&lt;/code>. This, however, changed sometime in September 2021, when Paragon Software&amp;rsquo;s &lt;code>ntfs3&lt;/code> driver was &lt;a href="https://www.phoronix.com/news/NTFS3-For-Linux-5.15">merged&lt;/a> into the Linux kernel.&lt;/p>
&lt;p>Recently I&amp;rsquo;ve upgraded my laptop to Fedora 37 which includes, along with kernel 6.x, the new &lt;code>ntfs3&lt;/code> driver. So I decided to modify the &lt;code>/etc/fstab&lt;/code> entry for the Windows partition to use the new, fast &lt;code>ntfs3&lt;/code> instead of the old, slow &lt;code>ntfs-3g&lt;/code>. Everything&amp;rsquo;s been fine up until today, when I noticed that a folder disappeared from the NTFS filesystem. The weird thing is that the directory wasn&amp;rsquo;t visible with &lt;code>ls&lt;/code> or any GUI file manager, but I could still &lt;code>cd&lt;/code> into it. Similarly, enclosed files weren&amp;rsquo;t visible with &lt;code>ls&lt;/code>, but could still be accessed by programs, knowing the filenames. For example, my torrent client could still seed existing files from there. This behavior screamed only one thing: filesystem corruption. So I booted into Windows to schedule a &lt;code>chkdsk&lt;/code> run, which indeed fixed the thing.&lt;/p>
&lt;p>I can&amp;rsquo;t prove it was a bug in the &lt;code>ntfs3&lt;/code> driver to cause this, but I think it&amp;rsquo;s reasonable to think so. Especially considering I&amp;rsquo;ve never experienced anything like this with &lt;code>ntfs-3g&lt;/code>, which I&amp;rsquo;ve been using since&amp;hellip; forever. There&amp;rsquo;s at least one &lt;a href="https://www.reddit.com/r/linux/comments/uca3fu/ntfs3_driver_is_orphan_already_what_we_do/i69453f/">place&lt;/a> on the web that seems to corroborate this thesis.&lt;/p>
&lt;p>All this to say that maybe we should stick to the &lt;del>bad&lt;/del> good old &lt;code>ntfs-3g&lt;/code>, at least until we &lt;a href="https://www.phoronix.com/news/Linus-Torvalds-NTFS3-Comments">hear&lt;/a> from Paragon itself.&lt;/p></description></item><item><title>Simulating memory load with fio</title><link>https://randthoughts.github.io/simulating-memory-load-with-fio/</link><pubDate>Sat, 20 Aug 2022 14:56:41 +0200</pubDate><guid>https://randthoughts.github.io/simulating-memory-load-with-fio/</guid><description>&lt;p>Recently at work I was tasked with simulating the workload of a client&amp;rsquo;s infrastructure consisting of several virtual machines. For our use case, this turned out to be a largely solved problem, thanks to existing tools like &lt;a href="https://fio.readthedocs.io/en/latest/fio_man.html">fio&lt;/a>.&lt;/p>
&lt;p>For those who don&amp;rsquo;t know it, fio is a simple yet powerful program that allows simulating various kinds of I/O workloads. Its simplicity stems from two basic facts: (1) it&amp;rsquo;s a standalone, CLI executable and (2) it uses plain INI files to define workloads. It&amp;rsquo;s also powerful because of its extensibility: thanks to I/O engines, it&amp;rsquo;s not limited to just I/O simulation.&lt;/p>
&lt;p>For example, here&amp;rsquo;s what a CPU-bound workload could look like, using the &lt;code>cpuio&lt;/code> engine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># File: burn-my-cpu.fio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[burn-my-cpu]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Don&amp;#39;t transfer any data, just burn CPU cycles &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ioengine&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">cpuio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Load the CPU at 100%&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cpuload&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Make four clones of this job. In a multiprocessor system, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># these are run concurrently on multiple CPUs.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">numjobs&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can run it with the command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>fio burn-my-cpu.fio
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The interesting thing here&amp;mdash;beyond the fact that we&amp;rsquo;re stressing the &lt;em>CPU&lt;/em> with an I/O simulation tool&amp;mdash;is &lt;code>numjobs=4&lt;/code>, which instructs fio to fork four processes&amp;mdash;or rather, &lt;em>jobs&lt;/em>, in fio lingo&amp;mdash;executing the same workload. One could also play with the reserved variable &lt;code>$ncpus&lt;/code> to load the desired number of CPUs based on the system at hand.&lt;/p>
&lt;p>OK, so fio is capable of generating both I/O and CPU workloads. What about memory? Specifically, how can we simulate a certain amount of memory being allocated for a period of time? Note that here I&amp;rsquo;m not interested in the simulation of specific read/write patterns; if that&amp;rsquo;s the case for you, time to close this browser tab I guess.&lt;/p>
&lt;p>After a bit of trial and error, I came up with the solution below. I&amp;rsquo;m not saying that it&amp;rsquo;s perfect or the right way to do it, but according to my testsâ„¢ it does the job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># File: fill-my-memory.fio&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[fill-my-memory]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This may be omitted, as it&amp;#39;s already the default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ioengine&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">psync&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Just read, don&amp;#39;t write anything&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">readwrite&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Read from /dev/zero to avoid disk I/O&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">filename&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/dev/zero&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Read 1GiB into memory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">1g&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Pin 1GiB of memory with mlock(2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This prevents memory from being paged to the swap area&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lockmem&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">1g&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Normally, once the specified size is read, the job terminates&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># To keep it running, we set the run time explicitly&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">time_based&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">runtime&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">5m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Stall the job after it has finished reading 1GiB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># This avoids wasting CPU cycles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">thinktime&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">1s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Don&amp;rsquo;t worry, I&amp;rsquo;ll try to explain everything in a moment (if comments haven&amp;rsquo;t already).&lt;/p>
&lt;p>Starting from the top, the I/O engine used is &lt;code>psync&lt;/code>, for the simple reason that it happens to be the default (in fact, we can even omit that line in the INI file). And since it appears to be a good fit for our use case, I didn&amp;rsquo;t feel the need to change it. If you&amp;rsquo;re concerned about what &lt;code>psync&lt;/code> actually does, you may want to look at &lt;code>pread(2)&lt;/code>&amp;rsquo;s man page, since that&amp;rsquo;s what &lt;code>psync&lt;/code> leverages behind the scenes. Here&amp;rsquo;s an excerpt:&lt;/p>
&lt;blockquote>
&lt;p>pread() reads up to count bytes from file descriptor fd at offset (from the start of the file) into the buffer starting at buf.&lt;/p>
&lt;/blockquote>
&lt;p>So far, so good.&lt;/p>
&lt;p>The line &lt;code>readwrite=read&lt;/code> tells fio the type of I/O we want to perform. Because we just want to allocate memory, it makes sense to simply &lt;em>read&lt;/em> data into it. This is the default behavior, but sometimes explicit is better than implicit&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Now come the interesting bits. First, there&amp;rsquo;s &lt;code>filename=/dev/zero&lt;/code>, which is a bit of a hack to avoid reading from a real file stored on disk. Not a big deal, but since we&amp;rsquo;re interested in just allocating a bunch of memory, why doing I/O at all? Especially if we can easily avoid it.&lt;/p>
&lt;p>Then, we use a combination of &lt;code>size=1g&lt;/code> and &lt;code>lockmem=1g&lt;/code> to read 1GiB worth of zeros into memory &lt;em>and&lt;/em> keep that allocated. The need for &lt;code>lockmem&lt;/code> can be understood by running the same job &lt;em>without&lt;/em> &lt;code>lockmem&lt;/code> and inspecting its memory usage, perhaps with &lt;code>top&lt;/code> (you may need to tweak its configuration to display the relevant columns). The following figure highlights memory usage when &lt;code>lockmem&lt;/code> is &lt;em>not&lt;/em> used:&lt;/p>
&lt;figure>
&lt;img src="https://randthoughts.github.io/images/without-lockmem.png" alt="Memory usage without lockmem."/>
&lt;figcaption>Memory usage without &lt;tt>lockmem&lt;/tt>.&lt;/figcaption>
&lt;/figure>
&lt;p>Not all memory is created equal: here we&amp;rsquo;re interested in the value of the &lt;code>RES&lt;/code> column, which stands for &lt;em>resident memory&lt;/em>. This value refers to the actual, &lt;em>physical&lt;/em> memory being allocated to the process, not counting swap. But how can it be (nearly) zero? I&amp;rsquo;m not super knowledgeable about the details, but generally speaking, what is happening here is that even though we are requesting to read 1GiB of data into memory, that amount is not wholly loaded into &lt;em>physical&lt;/em> memory. Instead, the OS acts as a middleman by effectively loading a fraction of it.&lt;/p>
&lt;p>You may appreciate why this default behavior is a good thing for everyone; think about what would happen if every process was able to allocate physical memory at will. Not incidentally, the use of &lt;code>lockmem&lt;/code> requires root privileges.&lt;/p>
&lt;p>Under the hood, &lt;code>lockmem&lt;/code> makes use of the &lt;code>mlock()&lt;/code> system call. Once again, &lt;code>man&lt;/code> comes to the rescue:&lt;/p>
&lt;blockquote>
&lt;p>mlock() [&amp;hellip;] lock[s] part or all of the calling process&amp;rsquo;s virtual address space into RAM, preventing that memory from being paged to the swap area.&lt;/p>
&lt;/blockquote>
&lt;p>What &lt;code>lockmem&lt;/code> essentially does is &amp;ldquo;pinning&amp;rdquo; the specified amount of memory to the physical memory. Indeed, if we run the job with &lt;code>lockmem=1g&lt;/code>, we can see that this time the &lt;code>RES&lt;/code> column reports the expected value:&lt;/p>
&lt;figure>
&lt;img src="https://randthoughts.github.io/images/with-lockmem.png" alt="Memory usage with lockmem."/>
&lt;figcaption>Memory usage with &lt;tt>lockmem&lt;/tt>.&lt;/figcaption>
&lt;/figure>
&lt;p>We then have &lt;code>time_based=1&lt;/code> and &lt;code>runtime=5m&lt;/code>, which simply say: &lt;em>&amp;ldquo;Run this job for five minutes, whether or not we&amp;rsquo;re done with I/O work&amp;rdquo;&lt;/em>. Seems innocuous, right? Indeed, it does what we expect, but with a caveat: the CPU goes crazy for the entire job duration.&lt;/p>
&lt;p>As with the unnecessary disk I/O&amp;mdash;which we avoided by reading from &lt;code>/dev/zero&lt;/code>&amp;mdash;I didn&amp;rsquo;t like the fact that a job intended to stress the memory generated a substantial amount of CPU workload. I think it&amp;rsquo;s good to keep things isolated so that we can test them independently.&lt;/p>
&lt;p>After digging a bit in fio&amp;rsquo;s manual, my attention was drawn to the description of the &lt;code>time_based&lt;/code> parameter:&lt;/p>
&lt;blockquote>
&lt;p>If set, fio will run for the duration of the runtime specified even if the file(s) are completely read or written. &lt;strong>It will simply loop over the same workload as many times as the runtime allows.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>If I understand it correctly, the job is busy reading from &lt;code>/dev/zero&lt;/code> over and over, even after the initial read of 1GiB is complete. This inevitably puts a toll on the CPU.&lt;/p>
&lt;p>Fortunately, fio is a goldmine of parameters. In the last line of our workload definition, there&amp;rsquo;s this option called &lt;code>thinktime&lt;/code>, which, according to the manual, allows to &lt;em>&amp;ldquo;stall a job for the specified period of time after an I/O has completed before issuing the next&amp;rdquo;&lt;/em>. I discovered that setting &lt;code>thinktime&lt;/code> to &lt;em>any&lt;/em> value that is &lt;em>not&lt;/em> in microseconds, causes the job to stall &lt;em>indefinitely&lt;/em>&amp;mdash;unless &lt;code>time_based&lt;/code> and &lt;code>runtime&lt;/code> are also set, in which case the job is stopped after a fixed interval. While this is exactly what &lt;em>we&lt;/em> want, I&amp;rsquo;m not sure why fio behaves like that. Even if we agree that &lt;code>thinktime&lt;/code> should stall the job indefinitely&amp;mdash;because there&amp;rsquo;s no job to issue next&amp;mdash;why should the chosen unit of time matter?&lt;/p>
&lt;p>Anyway, here&amp;rsquo;s an interesting comparison between the job running without and with &lt;code>thinktime&lt;/code> set:&lt;/p>
&lt;figure>
&lt;img src="https://randthoughts.github.io/images/cpu-without-thinktime.png" alt="CPU and memory usage without thinktime"/>
&lt;figcaption>CPU and memory usage without &lt;tt>thinktime&lt;/tt>.&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="https://randthoughts.github.io/images/cpu-with-thinktime.png" alt="CPU and memory usage with thinktime"/>
&lt;figcaption>CPU and memory usage with &lt;tt>thinktime=1s&lt;/tt>.&lt;/figcaption>
&lt;/figure>
&lt;p>For the purpose of this visualization, I set &lt;code>runtime=30s&lt;/code> and &lt;code>size=4g&lt;/code>. You can see that with &lt;code>thinktime=1s&lt;/code>, the CPU is doing a significant amount of work only at the beginning and at the end of the job runtime, presumably because it&amp;rsquo;s busy loading/unloading data to/from memory.&lt;/p>
&lt;p>Ouch! Seems we&amp;rsquo;ve hit EOF. Don&amp;rsquo;t forget to run fio as root, because &lt;code>lockmem&lt;/code> needs it. I hope this post brought something new to the table!&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://peps.python.org/pep-0020/#the-zen-of-python">https://peps.python.org/pep-0020/#the-zen-of-python&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Random wallpaper with just bash and systemd</title><link>https://randthoughts.github.io/random-wallpaper-with-just-bash-and-systemd/</link><pubDate>Thu, 21 Jul 2022 17:08:41 +0200</pubDate><guid>https://randthoughts.github.io/random-wallpaper-with-just-bash-and-systemd/</guid><description>&lt;p>I&amp;rsquo;m a big fan of &lt;a href="https://peterlevi.com/variety/">Variety&lt;/a>, probably the most popular wallpaper changer among Linux users. It&amp;rsquo;s been sitting in my GNOME desktop&amp;rsquo;s system tray for a long time. (Yes, I know GNOME doesn&amp;rsquo;t actually have a system tray, but I can&amp;rsquo;t live without it so I installed Ubuntu&amp;rsquo;s &lt;em>AppIndicator and KStatusNotifierItem Support&lt;/em> extension).&lt;/p>
&lt;p>Recently, Variety started having some hiccups, for the simple reason that the API key used for fetching images from Unsplash is shared among &lt;em>all&lt;/em> Variety users, which means API rate limits are often &lt;a href="https://github.com/varietywalls/variety/issues/332">exceeded&lt;/a>. Since I don&amp;rsquo;t use most of Variety&amp;rsquo;s features and I have only Unsplash enabled as image source, I scratched an itch by writing my own little wallpaper changer. Truth be told, it&amp;rsquo;s nothing fancy, but it does the job.&lt;/p>
&lt;p>Here&amp;rsquo;s the script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -o pipefail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -o errexit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># What? Associative arrays?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>declare -A topics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>topics&lt;span style="color:#f92672">=(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>current_events&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BJJMtteDJA4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>wallpapers&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;bo8jQKTaE0Y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>3d_renders&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CDwuwXJAbEw&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>textures_and_patterns&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;iUIsnVtjB0Y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>experimental&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;qPYsDzvJOYc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>architecture&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rnSKDHwwYUk&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>nature&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;6sMVjTLSkeQ&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>business_and_work&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;aeu6rL-j6ew&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>fashion&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;S4MKLAsBB74&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>film&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hmenvQhUmxM&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>api_url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://api.unsplash.com/photos/random?orientation=landscape&amp;amp;topics=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>access_key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>images_dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>HOME&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/Pictures/wallchanger&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>image_prefix&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wallchanger_&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_topics&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wallpapers&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;nature&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;architecture&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>delete_older_than_days&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Delete images older than X days&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>images_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -type f -name &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_prefix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">*.jpg&amp;#34;&lt;/span> -mtime &lt;span style="color:#e6db74">&amp;#34;+&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>delete_older_than_days&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -exec rm --force &lt;span style="color:#e6db74">&amp;#39;{}&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>image_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>mktemp -p &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>images_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_prefix&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">XXXXXXXXXX.jpg&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Build request URL with comma-separated topics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>request_url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>api_url&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> topic in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>my_topics[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request_url&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>topics[$topic]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">%2C&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>image_url&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl --silent --show-error --header &lt;span style="color:#e6db74">&amp;#34;Authorization: Client-ID &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>access_key&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>request_url&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | jq --raw-output &lt;span style="color:#e6db74">&amp;#34;.links.download&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl --silent --show-error --location --header &lt;span style="color:#e6db74">&amp;#34;Authorization: Client-ID &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>access_key&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --output &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_path&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_url&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set as light, dark and lockscreen wallpaper regardless of current mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gsettings set &lt;span style="color:#e6db74">&amp;#34;org.gnome.desktop.background&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;picture-uri&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;file:///&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_path&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gsettings set &lt;span style="color:#e6db74">&amp;#34;org.gnome.desktop.background&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;picture-uri-dark&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;file:///&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_path&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gsettings set &lt;span style="color:#e6db74">&amp;#34;org.gnome.desktop.screensaver&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;picture-uri&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;file:///&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>image_path&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I know, I cheated. But you know what? Grepping JSON data ain&amp;rsquo;t no fun, and I&amp;rsquo;ve &lt;code>jq&lt;/code> already installed on my machine (who hasn&amp;rsquo;t, by the way?).&lt;/p>
&lt;p>If you&amp;rsquo;re interested in a different set of topics, you can change the &lt;code>my_topics&lt;/code> array to include any of the keys in the &lt;code>topics&lt;/code> array. I personally don&amp;rsquo;t like my home folder growing indefinitely, so the script deletes images older than &lt;code>$delete_older_than_days&lt;/code>. If there&amp;rsquo;s a wallpaper that I like particularly, I should have enough time to make a copy of it.&lt;/p>
&lt;p>I use this script with GNOME but it should work on other DEs as well, barring minor modifications. It&amp;rsquo;s worth noting that both light and dark wallpapers are changed, regardless of which theme mode is currently in use. To keep things consistent, the wallpaper of the lockscreen is also changed.&lt;/p>
&lt;p>Anyway, we&amp;rsquo;ve done only half of the job, as the script alone doesn&amp;rsquo;t automate wallpaper switching. The standard way of achieving that is a systemd service/timer combo. Since we&amp;rsquo;re only interested in running the script as regular, non-root user, unit files can be conveniently installed under &lt;code>~/.config/systemd/user&lt;/code>. Here is the service unit I use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-systemd" data-lang="systemd">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ~/.config/systemd/user/wallchanger.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Change GNOME wallpaper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ExecStart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/path/to/wallchanger.sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, replace &lt;code>/path/to/wallchanger.sh&lt;/code> with whatever the script&amp;rsquo;s path is. As mentioned, we also need a timer unit, which is responsible for the actual automation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-systemd" data-lang="systemd">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ~/.config/systemd/user/wallchanger.timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Start wallchanger.service hourly&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Timer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">OnCalendar&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">hourly&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">WantedBy&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">timers.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that for this to work, the two unit files must have the same name (except for the &lt;code>.timer&lt;/code>/&lt;code>.service&lt;/code> suffix). You can change &lt;code>hourly&lt;/code> to your preferred interval; for example, to switch wallpaper once a day, you can put &lt;code>daily&lt;/code>. Systemd has its own syntax for specifying schedules, which is well &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.time.html">documented&lt;/a>.&lt;/p>
&lt;p>Once everything is in place, we need to tell systemd to reload its configuration with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl --user daemon-reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, it&amp;rsquo;s time to test the service unit:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl --user start wallchanger.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you don&amp;rsquo;t see any output, don&amp;rsquo;t despair, that&amp;rsquo;s the expected outcome! Actually, your desktop&amp;rsquo;s wallpaper should have already changed by now. If that&amp;rsquo;s not the case, you can inspect what&amp;rsquo;s going on with journalctl (add &lt;code>--follow&lt;/code> to monitor the unit in realtime):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>journalctl --user --unit wallchanger.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, we need to enable and start the timer so that it&amp;rsquo;s preseved across reboots:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl enable --now wallchanger.timer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enough wasted time for today. If you really want to use my ugly script, make sure you get an &lt;a href="https://unsplash.com/developers">API key&lt;/a> from Unsplash. The default, free, &amp;ldquo;demo&amp;rdquo; mode is capped at 50 requests per hour, which is more than enough for this use case&amp;hellip; Right?&lt;/p></description></item><item><title>Little rant about GNOME's file manager (aka Nautilus)</title><link>https://randthoughts.github.io/little-rant-about-gnomes-file-manager-aka-nautilus/</link><pubDate>Fri, 08 Apr 2022 12:07:42 +0200</pubDate><guid>https://randthoughts.github.io/little-rant-about-gnomes-file-manager-aka-nautilus/</guid><description>&lt;p>It&amp;rsquo;s a bit unfortunate that my first blog post is essentially a rant, but there it is. I started to write this as a comment on Reddit, but soon I realized I didn&amp;rsquo;t want to give away free content to a platform that doesn&amp;rsquo;t value its users anymore (at least not the way it used to). But let&amp;rsquo;s not digress.&lt;/p>
&lt;p>First of all: who am I? For the sake of this post, I think it&amp;rsquo;s sufficient to say that I&amp;rsquo;m a Linux user, as probably you are. After the infamous rite of passage known as distro-hopping, I finally settled on Fedora, which happens to ship GNOME as the default desktop experience&amp;mdash;mind you, defaults matter. As a user, there are quite a few gripes that I have with GNOME&amp;rsquo;s default file manager Nautilus, and judging from the project&amp;rsquo;s issue tracker they seem to be shared by more than a bunch of people. I&amp;rsquo;ll list my top 5:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Lack of type-ahead search&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/strong>. Believe it or not, triggering a full-blown recursive search doesn&amp;rsquo;t replace the ability to focus a particular file in the current folder by simply typing (part of) its name. I suspect 90% of users&amp;mdash;especially those coming from Windows or macOS&amp;mdash;expect the latter behavior. As some folks like to say&amp;hellip; &lt;em>if it ain&amp;rsquo;t broke, don&amp;rsquo;t fix it&lt;/em>.&lt;/li>
&lt;li>&lt;strong>Thumbnail generation is painfully slow&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/strong>. There&amp;rsquo;s not much to be said about this. You can try it yourself by opening a folder full of pictures for the first time and observe how long it takes for all thumbnails to be displayed.&lt;/li>
&lt;li>&lt;strong>Search is so slow it locks up the UI&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/strong>. When typing a file name to search, sometimes the whole UI freezes for a few seconds. My limited experience suggests that some piece of synchronous code probably needs to be revised, but I&amp;rsquo;m just guessing.&lt;/li>
&lt;li>&lt;strong>Icons keep moving downwards while thumbnails are being generated&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/strong>. This is a good old one. Together with (2), I can only imagine how miserable photographers&amp;rsquo; experience must be. Not to mention the lack of thumbnails in GTK&amp;rsquo;s file picker, which amounts to a meme now&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. Since it&amp;rsquo;s technically not part of Nautilus, I wont&amp;rsquo;t dig deeper.&lt;/li>
&lt;/ol>
&lt;p>I understand GNOME lacks resources, but oh boy, when I see developers&amp;rsquo; time and effort spent on endlessly redesigning and rewriting core apps, I wonder: is that really necessary? How about working on these &lt;em>major&lt;/em> issues instead? One of them dates back to 2006. I guess that fixing a 16 years old bug is not as exciting as rewriting the default image viewer in Rust&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>What baffles me is that Nemo, Cinnamon&amp;rsquo;s default file manager, has none of the aforementioned problems. And guess what, it&amp;rsquo;s essentially what GNOME&amp;rsquo;s file manager used to be before the catastrophe that began with the release of Nautilus 3.6 sometime around 2012&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I hate when people shrug off the problem of Nautilus being an underperforming piece of software by simply saying: &amp;ldquo;It&amp;rsquo;s Linux, you&amp;rsquo;re free to use something else&amp;rdquo;. That&amp;rsquo;s not a solution, it&amp;rsquo;s diverting attention from the problem itself. I can&amp;rsquo;t wrap my head around the fact that such a fundamental and user-facing application of an OS is being almost neglected.&lt;/p>
&lt;p>Maybe what I&amp;rsquo;m ranting about is an inherent consequence of community-maintained software, where a bunch of generous people contribute to what &lt;em>they&lt;/em> want in their limited spare time. Users can complain how they want, but they can&amp;rsquo;t expect someone with the necessary skills and time to magically show up and fix such issues.&lt;/p>
&lt;p>I don&amp;rsquo;t know much about the dynamics of GNOME as a community project, so probably this is a wild and naive take, but couldn&amp;rsquo;t the GNOME Foundation allocate some funds to a sort of bug bounty program to incentivize fixing major, long-standing issues?&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://gitlab.gnome.org/GNOME/nautilus/-/issues/1157">https://gitlab.gnome.org/GNOME/nautilus/-/issues/1157&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://gitlab.gnome.org/GNOME/nautilus/-/issues/856">https://gitlab.gnome.org/GNOME/nautilus/-/issues/856&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://gitlab.gnome.org/GNOME/nautilus/-/issues/246">https://gitlab.gnome.org/GNOME/nautilus/-/issues/246&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=335743">https://bugzilla.gnome.org/show_bug.cgi?id=335743&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>&lt;a href="https://wiki.installgentoo.com/wiki/File_Picker_meme">https://wiki.installgentoo.com/wiki/File_Picker_meme&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>&lt;a href="https://gitlab.gnome.org/BrainBlasted/loupe">https://gitlab.gnome.org/BrainBlasted/loupe&lt;/a>&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>&lt;a href="https://web.archive.org/web/20130313170552/http://cinnamon.linuxmint.com/?p=198">https://web.archive.org/web/20130313170552/http://cinnamon.linuxmint.com/?p=198&lt;/a>&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>